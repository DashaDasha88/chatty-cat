[{"/home/dasha/learning/chatty-cat/src/index.js":"1","/home/dasha/learning/chatty-cat/src/App.jsx":"2","/home/dasha/learning/chatty-cat/src/components/ChatFeed.jsx":"3","/home/dasha/learning/chatty-cat/src/components/TheirMessage.jsx":"4","/home/dasha/learning/chatty-cat/src/components/MyMessage.jsx":"5","/home/dasha/learning/chatty-cat/src/components/MessageForm.jsx":"6"},{"size":146,"mtime":1624572341188,"results":"7","hashOfConfig":"8"},{"size":440,"mtime":1624572706964,"results":"9","hashOfConfig":"8"},{"size":1654,"mtime":1624575734706,"results":"10","hashOfConfig":"8"},{"size":980,"mtime":1624576887970,"results":"11","hashOfConfig":"8"},{"size":499,"mtime":1624576145982,"results":"12","hashOfConfig":"8"},{"size":490,"mtime":1624577330346,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"h9as7h",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/dasha/learning/chatty-cat/src/index.js",[],["28","29"],"/home/dasha/learning/chatty-cat/src/App.jsx",[],"/home/dasha/learning/chatty-cat/src/components/ChatFeed.jsx",["30"],"import React from 'react';\n\nimport MessageForm from \"./MessageForm\";\nimport MyMessage from \"./MyMessage\";\nimport TheirMessage from \"./TheirMessage\";\n\nconst ChatFeed = (props) => {\n\n  const { chats, activeChat, userName, messages } = props;\n\n  const chat = chats && chats[activeChat];\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: \"100%\" }} >\n          <div className=\"message-block\">\n            {\n              isMyMessage\n              ? <MyMessage message={message} />\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\n            }\n\n          </div>\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? \"18px\" : '0px', marginLeft: isMyMessage ? \"0px\" : \"68px\"}}>\n            read-receipts\n          </div>\n        </div>\n      );\n\n    })\n  }\n\n  if(!chat) return 'Loading...';\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat ?.title}</div>\n        <div className=\"chat-subtitle\">\n          {chat.people.map((person) => `${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: \"100px\" }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  )\n\n}\n\nexport default ChatFeed;\n","/home/dasha/learning/chatty-cat/src/components/TheirMessage.jsx",[],"/home/dasha/learning/chatty-cat/src/components/MyMessage.jsx",[],"/home/dasha/learning/chatty-cat/src/components/MessageForm.jsx",["31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":45,"column":38,"nodeType":"38","messageId":"39","endLine":45,"endColumn":50,"fix":"40"},{"ruleId":"41","severity":1,"message":"42","line":5,"column":17,"nodeType":"43","messageId":"44","endLine":5,"endColumn":25},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-whitespace-before-property","Unexpected whitespace before property title.","MemberExpression","unexpectedWhitespace",{"range":"47","text":"48"},"no-unused-vars","'setValue' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",[1275,1278],"?."]